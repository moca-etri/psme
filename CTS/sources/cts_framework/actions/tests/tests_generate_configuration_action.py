"""
 * @section LICENSE
 *
 * @copyright
 * Copyright (c) 2019 Intel Corporation
 *
 * @copyright
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * @copyright
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * @copyright
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @section DESCRIPTION
"""

from cts_framework.actions.action import Action
from cts_framework.build_information import BuildInformation
from cts_framework.tests_managing.tests_manager import TestsManager


class TestsGenerateConfiguration(Action):
    ACTION = "generate_config"
    PARAM_NAME = "TESTS_CMD"

    def fill_parser_arguments(self):
        self.parser.add_argument("package", type=str, help="package identifier", nargs=1)
        self.parser.add_argument("test_script", type=str, nargs=1, default=None,
                                 help="test script to generate configuration file")
        self.parser.add_argument("-o", "--output_file", type=str, nargs=1, default=None, required=True,
                                 help="filename to save generated configuration")

    def process_action(self, configuration):
        package_name = configuration.package
        test_script_name = configuration.test_script

        tests_manager = TestsManager()
        packages = tests_manager.get_packages()
        packages.filter(packages=package_name, scripts=test_script_name, remove_empty=True)

        try:
            test_script_info = packages.packages[0].suites[0].scripts[0]
            generated_configuration = [
                "# Configuration file generated by CTS in version %s" % BuildInformation.get_version(),
                "",
                "[%s]" % test_script_info.name,
            ]

            generated_configuration += ["# %s" % line for line in
                                        test_script_info.description.split("\n") if line.strip()]
            generated_configuration.append("")
            for test_script_parameter in test_script_info.parameters:
                generated_configuration.append("# [%s] %s" % ("Required" if test_script_parameter.is_required else "Optional",
                                                              test_script_parameter.description))

                generated_configuration.append("%s%s=PUT_VALUE_HERE" % ("#" if not test_script_parameter.is_required else "",
                                                                        test_script_parameter.name))
                generated_configuration.append("")

            self.save_configuration(generated_configuration, configuration.output_file[0])

        except IndexError:
            print "Test script not found"

    def save_configuration(self, configuration, output_file_name):
        try:
            with open(output_file_name, "w") as configuration_file:
                configuration_file.writelines(["%s\n" % line for line in configuration])
        except IOError:
            msg = "Unable to save configuration to file, below is generated content:"
            print msg
            print "=" * len(msg)
            print ""

            for line in configuration:
                print line
