/*
 * Copyright (c) 2018-2019 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "buildscripts/wrapper.gradle"

def services = new ArrayList<>(gradle.includedBuilds)
services.removeAll { !gradle.ext.serviceNames.contains(it.getName()) }

task buildAll {
    dependsOn gradle.includedBuilds*.task(':build'),
            gradle.includedBuild('resource-manager').task(':buildAll')
}

task cleanAll {
    dependsOn gradle.includedBuilds*.task(':clean'),
            gradle.includedBuild('resource-manager').task(':cleanAll')
    doLast {
        project.buildDir.deleteDir()
    }
}

task test {
    dependsOn gradle.includedBuilds*.task(':test'),
            gradle.includedBuild('resource-manager').task(':testAll')
}

task createDockerfile {
    dependsOn services*.task(':createDockerfile')
}

task buildDockerImage {
    dependsOn services*.task(':buildDockerImage')
}

task pushDockerImage {
    dependsOn services*.task(':pushDockerImage')
}

buildscript {
    ext {
        asciidoctorGradlePluginVersion = '1.5.3' //DO NOT UPDATE, newer versions have problems with diagram generation
        asciidoctorJVersion = '1.5.6'
        asciidoctorJDiagramVersion = '1.5.8'
        jacocoVersion = '0.8.2'

    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:${asciidoctorGradlePluginVersion}")
    }
}

apply plugin: 'org.asciidoctor.convert'
apply plugin: 'jacoco'

repositories {
    jcenter()
}

dependencies {
    asciidoctor "org.asciidoctor:asciidoctorj-diagram:${asciidoctorJDiagramVersion}"
}

jacoco {
    toolVersion = "${jacocoVersion}"
}

asciidoctor {
    requires = ['asciidoctor-diagram']
    backends = ['html5']

    attributes 'doctype': 'book'

    sources {
        include 'index.adoc'
    }

    resources {
        from('src/docs/examples')
        into './examples'
    }
}

asciidoctorj {
    version = asciidoctorJVersion
}

build.dependsOn buildAll
clean.dependsOn cleanAll

task docsTar(type: Tar, dependsOn: asciidoctor) {
    baseName = "podm-docs"
    from("$project.buildDir/asciidoc/html5")
    exclude(".asciidoctor")
    into("podm-docs-$project.version")

    compression = Compression.GZIP
    extension = "tar.gz"
}