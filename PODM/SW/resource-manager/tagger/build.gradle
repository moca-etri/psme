/*
 * Copyright (c) 2018-2019 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

dependencies {
    compile project(":layer")
    compile project(":common")

    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.hibernate:hibernate-core:${hibernateVersion}")
    implementation("org.hibernate:hibernate-entitymanager:${hibernateVersion}")
    implementation("org.apache.commons:commons-lang3")

    implementation("com.intel.rsd:podm-common:${podmCommonVersion}")
    implementation("com.intel.rsd:podm-spring-hazelcast:${podmSpringHazelcastVersion}")
    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")

    implementation("org.postgresql:postgresql")

    testImplementation("org.testng:testng:${testNGVersion}")
    testImplementation("org.mockito:mockito-all:${mockitoVersion}")
    testImplementation("com.fasterxml.jackson.core:jackson-databind")

    testImplementation("org.springframework.boot:spring-boot-starter-data-jpa")
    testImplementation("org.hibernate:hibernate-core:${hibernateVersion}")
    testImplementation("org.hibernate:hibernate-entitymanager:${hibernateVersion}")

    testImplementation("com.intel.rsd:podm-common:${podmCommonVersion}")
    testImplementation("org.apache.commons:commons-lang3")
    testCompileOnly("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")
}

jacoco {
    toolVersion = "${jacocoVersion}"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = "${jacocoCounter}"
                minimum = 0.6
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
