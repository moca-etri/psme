/*
 * Copyright (c) 2019 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "../buildscripts/wrapper.gradle"

buildscript {
    ext {
        podmCommonVersion = '1.0-SNAPSHOT'
        springBootVersion = '2.0.0.RELEASE'
        dependencyManagementPluginVersion = '1.0.4.RELEASE'
        podmServiceDockerPluginVersion = '1.0-SNAPSHOT'
        gradleVersionsPluginVersion = '0.17.0'

        springCloudVersion = 'Finchley.M8'
        podmSpringHazelcastVersion = '1.0-SNAPSHOT'
        mockitoVersion = '2.0.2-beta'
        passayVersion = '1.4.0'
        testNGVersion = '6.14.3'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementPluginVersion}")
        classpath("com.intel.rsd:podm-service-docker-plugin:${podmServiceDockerPluginVersion}")
        classpath("com.github.ben-manes:gradle-versions-plugin:${gradleVersionsPluginVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.intel.rsd.podm-service-docker'
apply plugin: 'com.github.ben-manes.versions'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/libs-milestone' }
    maven { url 'http://repo.spring.io/milestone' }
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
    }
}

apply from: "../buildscripts/checkstyle.gradle"

dependencies {

    annotationProcessor("org.projectlombok:lombok")
    compileOnly("org.projectlombok:lombok")

    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-validation")
    compile("com.intel.rsd:podm-common:${podmCommonVersion}")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.apache.httpcomponents:httpclient")
    compile("com.intel.rsd:podm-spring-hazelcast:${podmSpringHazelcastVersion}")
    compile("org.passay:passay:${passayVersion}")

    runtime("org.postgresql:postgresql")

    testImplementation("org.testng:testng:${testNGVersion}")
    testCompile("org.mockito:mockito-all:${mockitoVersion}")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml")
    testRuntime("com.h2database:h2")
}

bootJar {
    launchScript()
}

test {
    useTestNG() {
    }

    testLogging {
        showStandardStreams = false
        //event to log on gradle output
        events = ["skipped", "passed", "failed"]
        exceptionFormat = "full"
        showExceptions = true
        showCauses = true
        showStackTraces = false
    }
}
